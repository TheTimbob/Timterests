package web

import (
    "timterests/internal/types"
)

templ ListPage[T types.DocumentItem](items []T, design, get, title string) {
    @Base() {
        <div id="container" class="category-container">
            <div class="flex justify-between items-center mb-2">
                <h1 class="category-title">{ title }</h1>
                <div>
                    <select class="filter-select" hx-get={ get } hx-target="#list" hx-trigger="change" hx-include="[name='design']" name="tag">
                        <option value="all">All</option>
                        for _, tag := range items[0].GetTags() {
                            <option value={ tag }>{ tag }</option>
                        }
                    </select>
                    <select class="filter-select" hx-get={ get } hx-target="#list" hx-trigger="change" hx-include="[name='tag']" name="design">
                        <option value="list">List</option>
                        <option value="grid">Grid</option>
                        <option value="links">Links</option>
                    </select>
                </div>
            </div>
            @List[T](items, design, get)
        </div>
    }
}

templ List[T types.DocumentItem](items []T, design, get string) {
    <ul id="list">
        if design == "grid" {
            for i := 0; i < len(items); i += 4 {
                <li class="grid-list-element">
                    for j := i; j < i+4 && j < len(items); j++ {
                        @MiniCard[T](items[j], get + "?id=" + items[j].GetID())
                    }
                </li>
            }
        } else if design == "links" {
            for _, item := range items {
                <li>
                    @Link(item.GetTitle(), get + "?id=" + item.GetID())
                </li>
            }
        } else {
            for _, item := range items {
                <li>
                    @Card[T](item, get + "?id=" + item.GetID())
                </li>
            }
        }
    </ul>
}

templ Card[T types.DocumentItem](item T, get string) {
    <div class="card-container" hx-get={ get } hx-target="#main-content" hx-swap="innerHTML" hx-replace-url="true" tabindex="0">
        <div>
            <div class="card-title-container">
                <h1 class="card-title">{ item.GetTitle() }</h1>
                <h2 class="card-subtitle">{ item.GetSubtitle() }</h2>
            </div>
            <p class="card-body">
                @templ.Raw(item.GetBody())
            </p>
            <div class="tag-container">
                for _, tag := range item.GetTags() {
                    <p class="card-tag">{ tag }</p>
                }
            </div>
        </div>
    </div>
}

templ MiniCard[T types.DocumentItem](item T, get string) {
    <div class="mini-card-container" hx-get={ get } hx-target="#main-content" hx-swap="innerHTML" hx-replace-url="true" tabindex="0">
        <div>
            <div class="card-title-container">
                <h1 class="card-subtitle">{ item.GetTitle() }</h1>
            </div>
            <div class="tag-container">
                for _, tag := range item.GetTags() {
                    <p class="card-tag">{ tag }</p>
                }
            </div>
        </div>
    </div>
}

templ Link(title string, get string) {
    <div class="hyperlink" hx-get={ get } hx-target="#main-content" hx-swap="innerHTML" hx-replace-url="true" tabindex="0">
        <p>{ title }</p>
    </div>
}

templ Page[T types.DocumentItem](item T) {
    @Base() {
        @Display[T](item)
    }
}

templ Display[T types.DocumentItem](item T) {
    <div id="container">
        <h1 class="category-title">{ item.GetTitle() }</h1>
        <h2 class="category-subtitle">{ item.GetSubtitle() }</h2>
        @templ.Raw(item.GetBody())
    </div>
}
